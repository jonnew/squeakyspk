function Plot_simulations(handles)

USER_DATA = get(handles.wave_clus_figure,'userdata');
par = USER_DATA{1};
spikes = USER_DATA{2};
index = USER_DATA{3};
classes = USER_DATA{6};
nclusters = max(classes);
filename = handles.simname;

h_figs=get(0,'children');
h_fig1 = findobj(h_figs,'Name','detection');
h_fig2= findobj(h_figs,'Name','detection_aux');
close(h_fig1); close(h_fig2); 

% load original simulation data
% spike times are in data counts
eval(['load ' filename ';']);
sim_times = cell2mat(spike_times)';
sim_class = cell2mat(spike_class)' + 1;
% spike_times units 
% downsampling = 4;
% tres = 1/96000; 
% samplingInterval = 1/96000;
% samps_per_ms     = round(tres/samplingInterval);
% spiketimes = spiketimes * samps_per_ms; in this case ~1 
% spike_times = ceil(spiketimes/downsampling);
sim_times = 1000 * (sim_times/24000); % time in miliseconds

% load detected data
% detected times are in miliseconds
% eval(['load times_' filename ';']);
det_times = index;% cluster_class(:,2);
det_class = classes; % cluster_class(:,1);


% class_det_sim = repmat(100,length(det_times),1); 
for i=1:length(det_times)
    aux = abs(repmat(det_times(i),length(sim_times),1) - sim_times);
    [aux isim] = min(aux);
    if aux <= 1
        class_det_sim(i,1) = det_class(i);
        class_det_sim(i,2) = sim_class(isim);
    else 
        class_det_sim(i,:) = [-1 -1];
    end
end

% class number equal to -1 are classes that
% have been detected but they have not been generated by the
% simulator (false positives)
intra_inter_simclass = [];
for i=1:nclusters
    ind = find(classes==i); % index of the detected classes
    classdet_size = length(ind); % size of the detected cluster
    % labels of the simulated clusters
    % -1: this spike has not been generated as single or multiunit
    % 1: spike generated as multiunit
    classim = class_det_sim(ind,2);  
    
    % find the biggest class within the vector
    jj = 0;
    classim_size = [];
    nclassim = max(classim);
    for j=-1:nclassim
        jj = jj + 1;
        aux = repmat(j,length(classim),1) - classim;
        classim_size(jj,1) = length(find(aux==0));
        classim_size(jj,2) = j;
    end
    [classim iclass] = max(classim_size(:,1));
    iclass = classim_size(iclass,2);    
    rdetect = classim/classdet_size;
    intra_inter_simclass(i,1) = rdetect; % ratio of detection within the cluster
    if iclass == -1, intra_inter_simclass(i,2) = 0;
    else, intra_inter_simclass(i,2) = classim/length(find(sim_class==iclass)); end
    intra_inter_simclass(i,3) = iclass;
end

colors = ['b' 'r' 'g' 'c' 'm' 'y' 'b' 'r' 'g' 'c' 'm' 'y']; 

for i=1:size(intra_inter_simclass,1)
    %     if size(results_det,1) == 1, subplot(1,1,i); end
    if i < 5
        h_fig1 = 100;
        figure(h_fig1)
        set(gcf,'numbertitle','off','name','detection')
        subplot(2,2,i)
        bar(intra_inter_simclass(i,1:2),.5,'grouped','EdgeColor',colors(i),'FaceColor',colors(i))
        % t = strcat('Cluster',num2str(i+1))
        eval(['title(''Cluster ' num2str(i) ' (sim: ' num2str(intra_inter_simclass(i,3))  ')'''  ');']);
        ylim([0 1.1])
        ylabel('Hits ratio')
        set(gca,'xticklabel',['Intra'; 'Inter'])
        line(xlim,[0.8 0.8],'color',[0.5 0.5 0.5])
        line(xlim,[0.2 0.2],'color',[0.5 0.5 0.5])
    else
        h_fig2 = 101;
        figure(h_fig2)
        set(gcf,'numbertitle','off','name','detection_aux')
        subplot(2,2,i-4)
        bar(intra_inter_simclass(i,1:2),.5,'grouped','EdgeColor',colors(i),'FaceColor',colors(i))
        % t = strcat('Cluster',num2str(i+1))
        eval(['title(''Cluster ' num2str(i) ' (sim: ' num2str(intra_inter_simclass(i,3))  ')'''  ');']);
        ylim([0 1.1])
        ylabel('Hits ratio')
        set(gca,'xticklabel',['Intra'; 'Inter'])
        line(xlim,[0.8 0.8],'color',[0.5 0.5 0.5])
        line(xlim,[0.2 0.2],'color',[0.5 0.5 0.5])
    end
end

if size(intra_inter_simclass,1)==0
    h_fig1 = 100;
    figure(h_fig1)
    set(gcf,'numbertitle','off','name','detection')
end

% SAVE FIGURES
if ~isempty(h_fig1)
    figure(h_fig1); set(gcf,'papertype','usletter','paperorientation','portrait','paperunits','inches')
    set(gcf,'paperposition',[.25 .25 10.5 7.8])
    eval(['print(h_fig1,''-djpeg'',''det_' filename(1:end-4) ''')' ]);
end
if ~isempty(h_fig2)
    figure(h_fig2); set(gcf,'papertype','usletter','paperorientation','portrait','paperunits','inches')
    set(gcf,'paperposition',[.25 .25 10.5 7.8])
    eval(['print(h_fig2,''-djpeg'',''det_' filename(1:end-4) '_a' ''')' ]);
end


 
